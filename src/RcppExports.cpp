// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// revcompR
Rcpp::StringVector revcompR(Rcpp::StringVector sequences);
RcppExport SEXP _jaeger_revcompR(SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(revcompR(sequences));
    return rcpp_result_gen;
END_RCPP
}
// check_whitelist
LogicalVector check_whitelist(DataFrame r_whitelist_df, NumericVector mutations);
RcppExport SEXP _jaeger_check_whitelist(SEXP r_whitelist_dfSEXP, SEXP mutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type r_whitelist_df(r_whitelist_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mutations(mutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_whitelist(r_whitelist_df, mutations));
    return rcpp_result_gen;
END_RCPP
}
// barcodes_to_bits
Rcpp::NumericVector barcodes_to_bits(Rcpp::StringVector barcodes);
RcppExport SEXP _jaeger_barcodes_to_bits(SEXP barcodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type barcodes(barcodesSEXP);
    rcpp_result_gen = Rcpp::wrap(barcodes_to_bits(barcodes));
    return rcpp_result_gen;
END_RCPP
}
// bits_to_barcodes
Rcpp::StringVector bits_to_barcodes(Rcpp::NumericVector input, int barcode_length, bool verbose);
RcppExport SEXP _jaeger_bits_to_barcodes(SEXP inputSEXP, SEXP barcode_lengthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type barcode_length(barcode_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bits_to_barcodes(input, barcode_length, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mutate_and_check
Rcpp::NumericVector mutate_and_check(Rcpp::NumericVector barcode, int max_mutations, Rcpp::DataFrame r_whitelist_df, int barcode_length);
RcppExport SEXP _jaeger_mutate_and_check(SEXP barcodeSEXP, SEXP max_mutationsSEXP, SEXP r_whitelist_dfSEXP, SEXP barcode_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type barcode(barcodeSEXP);
    Rcpp::traits::input_parameter< int >::type max_mutations(max_mutationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type r_whitelist_df(r_whitelist_dfSEXP);
    Rcpp::traits::input_parameter< int >::type barcode_length(barcode_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(mutate_and_check(barcode, max_mutations, r_whitelist_df, barcode_length));
    return rcpp_result_gen;
END_RCPP
}
// baj_extract
Rcpp::DataFrame baj_extract(std::vector<std::string>& sigstrings, Rcpp::DataFrame whitelist_df, Rcpp::DataFrame df, int nthreads, bool verbose, int max_iterations, int max_mutations, int barcode_length, bool barcorrect, bool jaccard_on);
RcppExport SEXP _jaeger_baj_extract(SEXP sigstringsSEXP, SEXP whitelist_dfSEXP, SEXP dfSEXP, SEXP nthreadsSEXP, SEXP verboseSEXP, SEXP max_iterationsSEXP, SEXP max_mutationsSEXP, SEXP barcode_lengthSEXP, SEXP barcorrectSEXP, SEXP jaccard_onSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type sigstrings(sigstringsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type whitelist_df(whitelist_dfSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type max_mutations(max_mutationsSEXP);
    Rcpp::traits::input_parameter< int >::type barcode_length(barcode_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type barcorrect(barcorrectSEXP);
    Rcpp::traits::input_parameter< bool >::type jaccard_on(jaccard_onSEXP);
    rcpp_result_gen = Rcpp::wrap(baj_extract(sigstrings, whitelist_df, df, nthreads, verbose, max_iterations, max_mutations, barcode_length, barcorrect, jaccard_on));
    return rcpp_result_gen;
END_RCPP
}
// bajalign_sigs
Rcpp::CharacterVector bajalign_sigs(Rcpp::CharacterVector adapters, std::vector<std::string> sequences, Rcpp::DataFrame null_distance, int nthreads);
RcppExport SEXP _jaeger_bajalign_sigs(SEXP adaptersSEXP, SEXP sequencesSEXP, SEXP null_distanceSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type adapters(adaptersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type null_distance(null_distanceSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bajalign_sigs(adapters, sequences, null_distance, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// bajalign_stats
Rcpp::DataFrame bajalign_stats(Rcpp::CharacterVector adapters, std::vector<std::string> sequences, int nthreads);
RcppExport SEXP _jaeger_bajalign_stats(SEXP adaptersSEXP, SEXP sequencesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type adapters(adaptersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bajalign_stats(adapters, sequences, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// bajbatch
StringVector bajbatch(DataFrame null_distance, DataFrame read_layout, StringVector sigstrings, bool verbose);
RcppExport SEXP _jaeger_bajbatch(SEXP null_distanceSEXP, SEXP read_layoutSEXP, SEXP sigstringsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type null_distance(null_distanceSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type read_layout(read_layoutSEXP);
    Rcpp::traits::input_parameter< StringVector >::type sigstrings(sigstringsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bajbatch(null_distance, read_layout, sigstrings, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _jaeger_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jaeger_revcompR", (DL_FUNC) &_jaeger_revcompR, 1},
    {"_jaeger_check_whitelist", (DL_FUNC) &_jaeger_check_whitelist, 2},
    {"_jaeger_barcodes_to_bits", (DL_FUNC) &_jaeger_barcodes_to_bits, 1},
    {"_jaeger_bits_to_barcodes", (DL_FUNC) &_jaeger_bits_to_barcodes, 3},
    {"_jaeger_mutate_and_check", (DL_FUNC) &_jaeger_mutate_and_check, 4},
    {"_jaeger_baj_extract", (DL_FUNC) &_jaeger_baj_extract, 10},
    {"_jaeger_bajalign_sigs", (DL_FUNC) &_jaeger_bajalign_sigs, 4},
    {"_jaeger_bajalign_stats", (DL_FUNC) &_jaeger_bajalign_stats, 3},
    {"_jaeger_bajbatch", (DL_FUNC) &_jaeger_bajbatch, 4},
    {"_jaeger_rcpp_hello_world", (DL_FUNC) &_jaeger_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_jaeger(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
